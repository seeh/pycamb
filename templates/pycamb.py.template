"""
This module exposes various functions from CAMB to python.
These functions are:
  camb - CMB C_ell calculation
  age  - age of the universe in Gyr
  transfers - matter transfer functions
  matter_power - matter power spectrum
  unsplined_matter_power - matter power spectrum at internal k values of camb
  angular_diameter - distance in Mpc
  get_both  - CMB C_ell and transfer functions   
  
In all these functions you specify cosmological parameters 

Parameter names are case-insensitive.

Any parameters that are not specified in the input are left with camb's default values,as given by the CAMB_SetDefParams subroutine in camb.f90.

You can either specify parameters as keywords:
    cl = camb(1000,H0=72.0,omegab=0.04)
    
Or using a dictionary:
    camb_params={"H0":72.0,"omegab":0.04}
    cl=camb(1000,**camb_params)

The latter method gives you more flexibilty when writing codes.

Valid parameters are all specified in the script that generated this code.  Most are elements of the CAMBparams derived type specified in modules.f90 .
Parameters that are not in CAMBparams can be set by pre-pending an underscore.

Parameters that are members of a sub-typewithin the CAMBparams type, (that is, all those accessed in fortran using CP%(something)%(varname)  ) such as the reionization parameters, should be given with the percent symbols replaced with a double underscore, __.

For example, to specify the redshift of reionization, given by CP%reion%redshift in camb use:
    cl=camb(1000,reion__redshift=11.0)

Boolean (logical) parameters can be specified as you would expect:
    cl=camb(1000,reionization=False)
    
You can let more parameters be passed into camb by modifiying the top of, and running, generatePyCamb.py

In this code, valid normal parameters are:
$param_string$

And parameters with default values are:
$defparam_string$    

Parameters which take a vector (like the primordial power spectrum parameters) are not yet properly implemented here, 
so only one spectral index, amplitude, etc., at a time is possible.  Keyword parameters that are mapped to camb names are:
$alias_string$    

    

"""

__all__ = ['camb','age','transfers', 'matter_power', 'get_both', 'angular_diameter', 'unsplined_matter_power']


import numpy as np
from collections import namedtuple as nt
import sys
import _pycamb
_getcls = _pycamb.pycamb_mod.getcls
_getage = _pycamb.pycamb_mod.getage
_gentransfers = _pycamb.pycamb_mod.gentransfers
_genpowerandcls = _pycamb.pycamb_mod.genpowerandcls
_freetransfers = _pycamb.pycamb_mod.freetransfers
_freepower = _pycamb.pycamb_mod.freematterpower
_getpower = _pycamb.pycamb_mod.getpower
_getunsplinedpower = _pycamb.pycamb_mod.getunsplinedpower
_angulardiameter = _pycamb.pycamb_mod.angulardiameter
_angulardiametervector = _pycamb.pycamb_mod.angulardiametervector
import os.path
_pycamb.pycamb_mod.setcltemplatepath(
     os.path.join(
        os.path.dirname(__file__),
        'camb/HighLExtrapTemplate_lenspotentialCls.dat')
)

NONLINEAR_NONE = 0
NONLINEAR_PK = 1
#Others not supported yet


numericalParameters=$numericalParameters$
logicalParameters=$logicalParameters$
defaultValues=$defaultValues$
NP=len(numericalParameters)+len(logicalParameters)
NN=len(numericalParameters)
NM=len(numericalParameters)+len(logicalParameters)

derivedParams = nt('DerivedParams', ['age', 'zstar', 'rstar', 'thetastar',
    'DAstar', 'zdrag', 'rdrag', 'kD', 'thetaD', 'zEQ', 'keq', 'thetaEQ',
    'theta_rs_EQ'])

def _build_pvec(**parameters):
    pvec=np.repeat(-1.6375e30,NP)
    input_params=parameters.keys()
    for n,p in enumerate(numericalParameters):
        pin=p
        if p.startswith('@'): pin=p.lstrip('@')
        if pin in input_params:
            pvec[n]=parameters[pin]
            input_params.remove(pin)
    for n,p in enumerate(logicalParameters):
        pin=p
        if p.startswith('@'): pin=p.lstrip('@')
        if pin in input_params:        
            if parameters[pin]:
                pvec[n+NN]=1.0
            else:
                pvec[n+NN]=0.0
            input_params.remove(pin)

    if input_params:
        print "WARNING: Unrecognized parameters:"
        for p in input_params:
            print p
    return pvec
    

def camb(lmax,max_eta_k=None,**parameters):
    """
Run camb up to the given lmax, with the given parameters and return the Cls.  
See the docstring for pycamb for more info on parameters.
Returns T,E,B,X and derived Parameters as a named tuple
    """
    if max_eta_k is None: max_eta_k=2*lmax
    pvec=_build_pvec(**parameters)
    cls, dPar=_getcls(pvec,lmax,max_eta_k)
    return cls.transpose(), derivedParams(*dPar)
    

def age(**parameters):
    """
Return the age of the unverse in Gyr with the given parameters.  
See the docstring for pycamb for more info on parameters.
"""
    pvec=_build_pvec(**parameters)
    age=_getage(pvec)
    return age
    

def transfers(redshifts=[0],maxk=0.9,**parameters):
    """
Calculate the matter power transfer function at the specified redshifts.
The redshifts should be monotonic *DECREASING* i.e. in chronological order.
If they are not the output will be re-ordered as if they were.
Return k, T, sigma8 as arrays in z

See the docstring for pycamb for more info on parameters.

    """
   
    lmax=2000
    pvec=_build_pvec(**parameters)
    redshifts = np.array(redshifts,dtype=np.float64)
    ordered_redshifts = redshifts.copy()
    ordered_redshifts.sort()
    ordered_redshifts=ordered_redshifts[::-1]
    if not (redshifts == ordered_redshifts).all(): sys.stderr.write("WARNING:  Re-ordered redshift vector to be in temporal order.  Ouput will be similarly re-ordered.\n")
    if len(redshifts)>500: raise ValueError("At most 500 redshifts can be computed without changing the hardcoded camb value")
    
    _gentransfers(pvec,lmax,maxk,ordered_redshifts)
    T = _pycamb.pycamb_mod.transfers.copy()
    K = _pycamb.pycamb_mod.transfers_k.copy()
    S = _pycamb.pycamb_mod.transfers_sigma8.copy()
    _freetransfers()
    return K,T,S


def matter_power(redshifts=[0],k=np.logspace(-3,0,50), get_sigma8=False,**parameters):
    """
Calculate the matter power spectrum at the specified redshifts.
The redshifts should be monotonic *DECREASING* i.e. in chronological order.
If they are not the output will be re-ordered as if they were.

Return k and P as arrays in z

If the parameter get_sigma8 is set then that will also be returned.

See the docstring for pycamb for more info on parameters.

    """

    pvec=_build_pvec(**parameters)
    redshifts = np.array(redshifts,dtype=np.float64)
    k = np.array(k,dtype=np.float64)
    ordered_redshifts = redshifts.copy()
    ordered_redshifts.sort()
    ordered_redshifts=ordered_redshifts[::-1]
    if not (redshifts == ordered_redshifts).all(): sys.stderr.write("WARNING:  Re-ordered redshift vector to be in temporal order.  Ouput will be similarly re-ordered.\n")
    if len(redshifts)>500: raise ValueError("At most 500 redshifts can be computed without changing the hardcoded camb value")
    _getpower(pvec,k,ordered_redshifts)
    power=_pycamb.pycamb_mod.matter_power.copy()
    kh=_pycamb.pycamb_mod.matter_power_kh.copy()
    sigma8=_pycamb.pycamb_mod.matter_power_sigma8.copy()
    _freepower()
    if get_sigma8:
        return kh.squeeze(),power.squeeze(),sigma8.squeeze()
    else:
        return kh.squeeze(),power.squeeze()

def unsplined_matter_power(redshifts=[0],maxk=0.9,**parameters):
    """
Calculate the unsplined matter power spectrum at the specified redshifts.
The redshifts should be monotonic *DECREASING* i.e. in chronological order.
If they are not the output will be re-ordered as if they were.

Return k, P, and sigma8 as arrays in z

See the docstring for pycamb for more info on parameters.

    """

    pvec=_build_pvec(**parameters)
    redshifts = np.array(redshifts,dtype=np.float64)
    ordered_redshifts = redshifts.copy()
    ordered_redshifts.sort()
    ordered_redshifts=ordered_redshifts[::-1]
    if not (redshifts == ordered_redshifts).all(): sys.stderr.write("WARNING:  Re-ordered redshift vector to be in temporal order.  Ouput will be similarly re-ordered.\n")
    if len(redshifts)>500: raise ValueError("At most 500 redshifts can be computed without changing the hardcoded camb value")
    _getunsplinedpower(pvec,maxk,ordered_redshifts)
    power=_pycamb.pycamb_mod.pk.copy()
    kh=_pycamb.pycamb_mod.matter_power_kh.copy()
    sigma8=_pycamb.pycamb_mod.matter_power_sigma8.copy()
    _freepower()
    return kh.squeeze(),power.squeeze(),sigma8.squeeze()

def get_both(redshifts=[0],lmax=2000,max_eta_k=None,k=np.logspace(-3,0,50),**parameters):
    """
Calculate BOTH the matter power spectrum at the specified redshifts and the CMB C_ell

The redshifts should be monotonic *DECREASING* i.e. in chronological order.
If they are not the output will be re-ordered as if they were.

Return (T,E,B,X),  k, T, sigma8, the latter 3 as arrays in z

See the docstring for pycamb for more info on parameters.

    """
    if max_eta_k is None: max_eta_k=2*lmax
    pvec=_build_pvec(**parameters)
    redshifts = np.array(redshifts,dtype=np.float64)
    ordered_redshifts = redshifts.copy()
    ordered_redshifts.sort()
    ordered_redshifts=ordered_redshifts[::-1]
    if not (redshifts == ordered_redshifts).all(): sys.stderr.write("WARNING:  Re-ordered redshift vector to be in temporal order.  Ouput will be similarly re-ordered.\n")
    if len(redshifts)>500: raise ValueError("At most 500 redshifts can be computed without changing the hardcoded camb value")
    nred = len(redshifts)
    cls = _genpowerandcls(pvec,lmax,max_eta_k, k, ordered_redshifts)
    power=_pycamb.pycamb_mod.matter_power.copy()
    kh=_pycamb.pycamb_mod.matter_power_kh.copy()
    _freepower()
    return cls,kh.squeeze(),power.squeeze()
    
    
def angular_diameter(z,**parameters):
    """
Calculate the angular diameter distance to the given redshift(s).

The redshifts should be monotonic *DECREASING* i.e. in chronological order.
If they are not the output will be re-ordered as if they were.

Return d_A(z)

See the docstring for pycamb for more info on parameters.
"""
    pvec=_build_pvec(**parameters)
    if isinstance(z,float) or len(z)==1:
        return _angulardiameter(pvec,z)
    redshifts = np.array(z,dtype=np.float64)
    ordered_redshifts = redshifts.copy()
    ordered_redshifts.sort()
    ordered_redshifts=ordered_redshifts[::-1]
    if not (redshifts == ordered_redshifts).all(): sys.stderr.write("WARNING:  Re-ordered redshift vector to be in temporal order.  Ouput will be similarly re-ordered.\n")
    return _angulardiametervector(pvec,ordered_redshifts)
        
    
    